#pragma once
#define _USE_MATH_DEFINES
#include<algorithm>


class Filter
{


public:
	static void tukeywin(double* win, int winlen, double p);




};

double a4k_lowpass[9] = { 1,
-5.3191965258226696633,
12.701401489019000124,
-17.702244087363499858,
15.702162422825200139,
-9.0563613702949403717,
3.3108520912222298982,
-0.70045253394777395872,
0.0655805096613704952, };

double b4k_lowpass[9] = { 6.8046691360680202403e-06,
5.4437353088544100936e-05,
0.00019053073580990501057,
0.00038106147161980899116,
0.00047632683914817337215,
0.00038106147161980899116,
0.00019053073580990501057,
5.4437353088544100936e-05,
6.8046691360680202403e-06, };

double a20k_lowpass[9] = { 1,
5.3191965258226696633,
12.701401489019000124,
17.702244087363599334,
15.702162422825200139,
9.0563613702949705697,
3.3108520912222401122,
0.70045253394777695632,
0.065580509661370897656, };

double b20k_lowpass[9] = { 0.25608691808654998612,
2.0486953446923998889,
7.1704337064233998333,
14.340867412846799667,
17.926084266058499139,
14.340867412846799667,
7.1704337064233998333,
2.0486953446923998889,
0.25608691808654998612, };

double a150_highpass[9] = { -7.8993547185668697708,
27.300540953803707822,
-53.916631945124080971,
66.552464353958754373,
-52.576941828013886493,
25.960693595113937704,
-7.3250220892493871361,
0.90425167807785755691, };

double b150_highpass[9] = { 0.95092148891370498198,
-7.6073719113096398559,
26.625801689583738607,
-53.251603379167477215,
66.564504223959346518,
-53.251603379167477215,
26.625801689583738607,
-7.6073719113096398559,
0.95092148891370498198, };

double a170_highpass[9] = { 1,
-7.88593540342329824,
27.208043273166602205,
-53.643376563364604692,
66.103979077392551744,
-52.135276902225740514,
25.699716251911482345,
-7.2393471049161819408,
0.89219737145923649901, };

double b170_highpass[9] = { 0.94456199979632704533,
-7.5564959983706163626,
26.447735994297158157,
-52.895471988594316315,
66.11933998574289717,
-52.895471988594316315,
26.447735994297158157,
-7.5564959983706163626,
0.94456199979632704533, };

double a200_highpass[9] = { 1,
-7.8658064706420720569,
27.069633098410090355,
-53.235472876783305196,
65.436106310270616859,
-51.479131705590312151,
25.312925434411951642,
-7.1126699051436883536,
0.87441611506692618061, };

double b200_highpass[9] = { 0.93510219498562108242,
-7.4808175598849686594,
26.182861459597390308,
-52.365722919194780616,
65.457153648993482875,
-52.365722919194780616,
26.182861459597390308,
-7.4808175598849686594,
0.93510219498562108242, };

double a1400_2860_bandpass[9] = { 1,
-7.2443358583689159147,
23.206654422941106475,
-42.926967578171257856,
50.14403051190266325,
-37.876323874291571769,
18.067696013930177656,
-4.9770868564360934982,
0.6063502872612573924, };

double b1400_2860_bandpass[9] = { 6.5721353374269993728e-05,
0,
-0.00026288541349707000025,
0,
0.00039432812024561001481,
0,
-0.00026288541349707000025,
0,
6.5721353374269993728e-05, };

double a2800_4000_bandpass[9] = { 1,
-6.8715648598329543972,
21.312172665362687951,
-38.866231553940906451,
45.529731225408660578,
-35.069717973407961153,
17.352108098252575275,
-5.0484636530246129738,
0.66301048438589615941, };

double b2800_4000_bandpass[9] = { 3.1238976917080001679e-05,
0,
-0.00012495590766833000848,
0,
0.00018743386150249001184,
0,
-0.00012495590766833000848,
0,
3.1238976917080001679e-05, };

double a4000_5720_bandpass[9] = { 1,
-6.0002148673304347426,
16.937516703589839295,
-28.988578096061086598,
32.769575577814947565,
-25.012146512204921578,
12.609423913661695238,
-3.8543235824049775218,
0.55443712256788968418, };

double b4000_5720_bandpass[9] = { 0.00012162828419156999785,
0,
-0.00048651313676629002027,
0,
0.00072976970514944004484,
0,
-0.00048651313676629002027,
0,
0.00012162828419156999785, };

double a5700_8150_bandpass[9] = { 1,
-4.4739238259197335879,
10.696938449567367613,
-16.359198052908695331,
17.524947371186421208,
-13.253672086898575344,
7.0198627997822269364,
-2.37698484131884058,
0.43072278932380542171, };

double b5700_8150_bandpass[9] = { 0.00044913502303610002052,
0,
-0.0017965400921444100567,
0,
0.0026948101382166201809,
0,
-0.0017965400921444100567,
0,
0.00044913502303610002052, };

double a8100_11580_bandpass[9] = { 1,
-1.9515191924820185498,
4.2528275297647333275,
-4.6660816443897559225,
5.2476498986925443901,
-3.4617586976306746749,
2.3428454852576745537,
-0.79023287492847960056,
0.30037005357177887221, };

double b8100_11580_bandpass[9] = { 0.0015819954454911299823,
0,
-0.0063279817819645103882,
0,
0.0094919726729467707865,
0,
-0.0063279817819645103882,
0,
0.0015819954454911299823, };

double a11000_17000_bandpass[9] = { 1,
1.6720175371564551803,
3.0389916139005022089,
2.9369414554560160369,
2.9489839437651665932,
1.7594266358265835404,
1.0879619673838929472,
0.33786150948808424399,
0.12038959989624468949, };

double b11000_17000_bandpass[9] = { 0.010209480791203130734,
0,
-0.040837923164812529875,
0,
0.061256884747218798282,
0,
-0.040837923164812529875,
0,
0.010209480791203130734, };

double a300_lowpass[9] = { 1,
-7.7987104738375343516,
26.611177558819207434,
-51.892833373423513876,
63.251430120196509677,
-49.34606935824442786,
24.063217702063163017,
-6.7058729784253525708,
0.81766080285707865016, };

double b300_lowpass[9] = { 1.9999999999999999976e-14,
1.5997999999999999081e-13,
5.5992982042901520041e-13,
1.1198499999999999185e-12,
1.3998100000000000706e-12,
1.1198499999999999185e-12,
5.5992982042901520041e-13,
1.5997999999999999081e-13,
1.9999999999999999976e-14, };

double a600_lowpass[9] = { 1,
-7.5974292300028087865,
25.262600434151337936,
-48.019179886688363013,
57.067860421860387987,
-43.421566934379896452,
20.656347265234472843,
-5.6171338939259172207,
0.66850182493943977047, };

double b600_lowpass[9] = { 4.6432000000000002485e-12,
3.7145569999999997594e-11,
1.3000948000000000877e-10,
2.6001896000000001754e-10,
3.2502370000000002193e-10,
2.6001896000000001754e-10,
1.3000948000000000877e-10,
3.7145569999999997594e-11,
4.6432000000000002485e-12, };

double a860_lowpass[9] = { 1,
-7.4229985428089007016,
24.126172573281152722,
-44.843636985951746965,
52.134472692212938227,
-38.819660619804366775,
18.078919764252088243,
-4.8146081838138483633,
0.56133932212140347229, };

double b860_lowpass[9] = { 7.6127450000000001124e-11,
6.0901963000000003924e-10,
2.1315687100000001596e-09,
4.2631374200000003192e-09,
5.3289217699999996529e-09,
4.2631374200000003192e-09,
2.1315687100000001596e-09,
6.0901963000000003924e-10,
7.6127450000000001124e-11, };

double a1225_lowpass[9] = { 1,
-7.1781557080795863612,
22.581101274053153816,
-40.658290911001628842,
45.826218833100995198,
-33.106489568818304292,
14.970000438215032901,
-3.8734600575010853518,
0.43907599469292801775, };

double b1225_lowpass[9] = { 1.1510215199999999695e-09,
9.208172189999999269e-09,
3.2228602660000001659e-08,
6.4457205329999994883e-08,
8.0571506659999995713e-08,
6.4457205329999994883e-08,
3.2228602660000001659e-08,
9.208172189999999269e-09,
1.1510215199999999695e-09, };

double a1740_lowpass[9] = { 1,
-6.8327792778421798658,
20.500069126497379557,
-35.26618626736114237,
38.039753270880105163,
-26.339971995990360654,
11.431992016675760482,
-2.8429993341814894237,
0.31012663710711885212, };

double b1740_lowpass[9] = { 1.6311660889999998692e-08,
1.3049328714999999071e-07,
4.5672650501999999816e-07,
9.1345301003999999632e-07,
1.1418162625500000219e-06,
9.1345301003999999632e-07,
4.5672650501999999816e-07,
1.3049328714999999071e-07,
1.6311660889999998692e-08, };

double a2360_lowpass[9] = { 1,
-6.4171698342167022844,
18.146541610128899435,
-29.515867212398941177,
30.186625235345442064,
-19.868910258188243745,
8.2160768473766996323,
-1.9508322865960601167,
0.20357579679983578425, };

double b2360_lowpass[9] = { 1.5585254270000001076e-07,
1.2468203416300000872e-06,
4.3638711957199996706e-06,
8.7277423914399993412e-06,
1.0909677989300000024e-05,
8.7277423914399993412e-06,
4.3638711957199996706e-06,
1.2468203416300000872e-06,
1.5585254270000001076e-07, };







void Filter::tukeywin(double* win, int winlen, double p)
{

	int par = winlen / 2;


	int low;
	int high;

	for (int i = 0; i < winlen; i++)
	{

		if (i < low)
		{
			win[i] = (1 + cos(M_PI / par * (i - par))) / 2;
		}
		else if (i > high)
		{
			win[i] = (1 + cos(M_PI / par * (i - 1 + par))) / 2;
		}
		else
		{
			win[i] = 1;
		}

	}




}

